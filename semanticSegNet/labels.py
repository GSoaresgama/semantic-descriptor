import numpy as np

from collections import namedtuple

# cityscapes_pallete = np.array([[128, 64, 128], [244, 35, 231], [69, 69, 69],
#                       # 0 = road, 1 = sidewalk, 2 = building
#                       [102, 102, 156], [190, 153, 153], [153, 153, 153],
#                       # 3 = wall, 4 = fence, 5 = pole
#                       [250, 170, 29], [219, 219, 0], [106, 142, 35],
#                       # 6 = traffic light, 7 = traffic sign, 8 = vegetation
#                       [152, 250, 152], [69, 129, 180], [219, 19, 60],
#                       # 9 = terrain, 10 = sky, 11 = person
#                       [255, 0, 0], [0, 0, 142], [0, 0, 69],
#                       # 12 = rider, 13 = car, 14 = truck
#                       [0, 60, 100], [0, 79, 100], [0, 0, 230],
#                       # 15 = bus, 16 = train, 17 = motocycle
#                       [119, 10, 32]])
#                       # 18 = bicycle

# cityscapes_pallete = cityscapes_pallete/float(255.0)


cityscapes_pallete_float = np.array([[0.        , 0.        , 0.        ],
                                     [0.        , 0.        , 0.        ],
                                     [0.        , 0.        , 0.        ],
                                     [0.        , 0.        , 0.        ],
                                     [0.07843137, 0.07843137, 0.07843137],
                                     [0.43529412, 0.29019608, 0.        ],
                                     [0.31764706, 0.        , 0.31764706],
                                     [0.50196078, 0.25098039, 0.50196078],
                                     [0.95686275, 0.1372549 , 0.90980392],
                                     [0.98039216, 0.66666667, 0.62745098],
                                     [0.90196078, 0.58823529, 0.54901961],
                                     [0.2745098 , 0.2745098 , 0.2745098 ],
                                     [0.4       , 0.4       , 0.61176471],
                                     [0.74509804, 0.6       , 0.6       ],
                                     [0.70588235, 0.64705882, 0.70588235],
                                     [0.58823529, 0.39215686, 0.39215686],
                                     [0.58823529, 0.47058824, 0.35294118],
                                     [0.6       , 0.6       , 0.6       ],
                                     [0.6       , 0.6       , 0.6       ],
                                     [0.98039216, 0.66666667, 0.11764706],
                                     [0.8627451 , 0.8627451 , 0.        ],
                                     [0.41960784, 0.55686275, 0.1372549 ],
                                     [0.59607843, 0.98431373, 0.59607843],
                                     [0.2745098 , 0.50980392, 0.70588235],
                                     [0.8627451 , 0.07843137, 0.23529412],
                                     [1.        , 0.        , 0.        ],
                                     [0.        , 0.        , 0.55686275],
                                     [0.        , 0.        , 0.2745098 ],
                                     [0.        , 0.23529412, 0.39215686],
                                     [0.        , 0.        , 0.35294118],
                                     [0.        , 0.        , 0.43137255],
                                     [0.        , 0.31372549, 0.39215686],
                                     [0.        , 0.        , 0.90196078],
                                     [0.46666667, 0.04313725, 0.1254902 ],
                                     [0.        , 0.        , 0.55686275]])

mapillary_pallete_float = np.asarray([[165,  42,  42],
                                    [  0, 192,   0],
                                    [250, 170,  31],
                                    [250, 170,  32],
                                    [196, 196, 196],
                                    [190, 153, 153],
                                    [180, 165, 180],
                                    [ 90, 120, 150],
                                    [250, 170,  33],
                                    [250, 170,  34],
                                    [128, 128, 128],
                                    [250, 170,  35],
                                    [102, 102, 156],
                                    [128,  64, 255],
                                    [140, 140, 200],
                                    [170, 170, 170],
                                    [250, 170,  36],
                                    [250, 170, 160],
                                    [250, 170,  37],
                                    [ 96,  96,  96],
                                    [230, 150, 140],
                                    [128,  64, 128],
                                    [110, 110, 110],
                                    [110, 110, 110],
                                    [244,  35, 232],
                                    [128, 196, 128],
                                    [150, 100, 100],
                                    [ 70,  70,  70],
                                    [150, 150, 150],
                                    [150, 120,  90],
                                    [220,  20,  60],
                                    [220,  20,  60],
                                    [255,   0,   0],
                                    [255,   0, 100],
                                    [255,   0, 200],
                                    [255, 255, 255],
                                    [255, 255, 255],
                                    [250, 170,  29],
                                    [250, 170,  28],
                                    [250, 170,  26],
                                    [250, 170,  25],
                                    [250, 170,  24],
                                    [250, 170,  22],
                                    [250, 170,  21],
                                    [250, 170,  20],
                                    [255, 255, 255],
                                    [250, 170,  19],
                                    [250, 170,  18],
                                    [250, 170,  12],
                                    [250, 170,  11],
                                    [255, 255, 255],
                                    [255, 255, 255],
                                    [250, 170,  16],
                                    [250, 170,  15],
                                    [250, 170,  15],
                                    [255, 255, 255],
                                    [255, 255, 255],
                                    [255, 255, 255],
                                    [255, 255, 255],
                                    [ 64, 170,  64],
                                    [230, 160,  50],
                                    [ 70, 130, 180],
                                    [190, 255, 255],
                                    [152, 251, 152],
                                    [107, 142,  35],
                                    [  0, 170,  30],
                                    [255, 255, 128],
                                    [250,   0,  30],
                                    [100, 140, 180],
                                    [220, 128, 128],
                                    [222,  40,  40],
                                    [100, 170,  30],
                                    [ 40,  40,  40],
                                    [ 33,  33,  33],
                                    [100, 128, 160],
                                    [ 20,  20, 255],
                                    [142,   0,   0],
                                    [ 70, 100, 150],
                                    [250, 171,  30],
                                    [250, 172,  30],
                                    [250, 173,  30],
                                    [250, 174,  30],
                                    [250, 175,  30],
                                    [250, 176,  30],
                                    [210, 170, 100],
                                    [153, 153, 153],
                                    [153, 153, 153],
                                    [128, 128, 128],
                                    [  0,   0,  80],
                                    [210,  60,  60],
                                    [250, 170,  30],
                                    [250, 170,  30],
                                    [250, 170,  30],
                                    [250, 170,  30],
                                    [250, 170,  30],
                                    [250, 170,  30],
                                    [192, 192, 192],
                                    [192, 192, 192],
                                    [192, 192, 192],
                                    [220, 220,   0],
                                    [220, 220,   0],
                                    [  0,   0, 196],
                                    [192, 192, 192],
                                    [220, 220,   0],
                                    [140, 140,  20],
                                    [119,  11,  32],
                                    [150,   0, 255],
                                    [  0,  60, 100],
                                    [  0,   0, 142],
                                    [  0,   0,  90],
                                    [  0,   0, 230],
                                    [  0,  80, 100],
                                    [128,  64,  64],
                                    [  0,   0, 110],
                                    [  0,   0,  70],
                                    [  0,   0, 142],
                                    [  0,   0, 192],
                                    [170, 170, 170],
                                    [ 32,  32,  32],
                                    [111,  74,   0],
                                    [120,  10,  10],
                                    [ 81,   0,  81],
                                    [111, 111,   0],
                                    [  0,   0,   0]])

mapillary_pallete_float = mapillary_pallete_float/255.

Label = namedtuple( 'Label' , ['name', 'id', 'trainId', 'category', 'categoryId', 'hasInstances', 'ignoreInEval', 'color',] )


labelsType = [
    #       name                     id    trainId   category            catId     hasInstances   ignoreInEval   color
    Label(  'unlabeled'            ,  0 ,      255 , 'void'            , 0       , False        , True         , (  0,  0,  0) ),
    Label(  'ego vehicle'          ,  1 ,      255 , 'void'            , 0       , False        , True         , (  0,  0,  0) ),
    Label(  'rectification border' ,  2 ,      255 , 'void'            , 0       , False        , True         , (  0,  0,  0) ),
    Label(  'out of roi'           ,  3 ,      255 , 'void'            , 0       , False        , True         , (  0,  0,  0) ),
    Label(  'static'               ,  4 ,      255 , 'void'            , 0       , False        , True         , (  0,  0,  0) ),
    Label(  'dynamic'              ,  5 ,      255 , 'void'            , 0       , False        , True         , (111, 74,  0) ),
    Label(  'ground'               ,  6 ,      255 , 'void'            , 0       , False        , True         , ( 81,  0, 81) ),
    Label(  'road'                 ,  7 ,        0 , 'flat'            , 1       , False        , False        , (128, 64,128) ),
    Label(  'sidewalk'             ,  8 ,        1 , 'flat'            , 1       , False        , False        , (244, 35,232) ),
    Label(  'parking'              ,  9 ,      255 , 'flat'            , 1       , False        , True         , (250,170,160) ),
    Label(  'rail track'           , 10 ,      255 , 'flat'            , 1       , False        , True         , (230,150,140) ),
    Label(  'building'             , 11 ,        2 , 'construction'    , 2       , False        , False        , ( 70, 70, 70) ),
    Label(  'wall'                 , 12 ,        3 , 'construction'    , 2       , False        , False        , (102,102,156) ),
    Label(  'fence'                , 13 ,        4 , 'construction'    , 2       , False        , False        , (190,153,153) ),
    Label(  'guard rail'           , 14 ,      255 , 'construction'    , 2       , False        , True         , (180,165,180) ),
    Label(  'bridge'               , 15 ,      255 , 'construction'    , 2       , False        , True         , (150,100,100) ),
    Label(  'tunnel'               , 16 ,      255 , 'construction'    , 2       , False        , True         , (150,120, 90) ),
    Label(  'pole'                 , 17 ,        5 , 'object'          , 3       , False        , False        , (153,153,153) ),
    Label(  'polegroup'            , 18 ,      255 , 'object'          , 3       , False        , True         , (153,153,153) ),
    Label(  'traffic light'        , 19 ,        6 , 'object'          , 3       , False        , False        , (250,170, 30) ),
    Label(  'traffic sign'         , 20 ,        7 , 'object'          , 3       , False        , False        , (220,220,  0) ),
    Label(  'vegetation'           , 21 ,        8 , 'nature'          , 4       , False        , False        , (107,142, 35) ),
    Label(  'terrain'              , 22 ,        9 , 'nature'          , 4       , False        , False        , (152,251,152) ),
    Label(  'sky'                  , 23 ,       10 , 'sky'             , 5       , False        , False        , ( 70,130,180) ),
    Label(  'person'               , 24 ,       11 , 'human'           , 6       , True         , False        , (220, 20, 60) ),
    Label(  'rider'                , 25 ,       12 , 'human'           , 6       , True         , False        , (255,  0,  0) ),
    Label(  'car'                  , 26 ,       13 , 'vehicle'         , 7       , True         , False        , (  0,  0,142) ),
    Label(  'truck'                , 27 ,       14 , 'vehicle'         , 7       , True         , False        , (  0,  0, 70) ),
    Label(  'bus'                  , 28 ,       15 , 'vehicle'         , 7       , True         , False        , (  0, 60,100) ),
    Label(  'caravan'              , 29 ,      255 , 'vehicle'         , 7       , True         , True         , (  0,  0, 90) ),
    Label(  'trailer'              , 30 ,      255 , 'vehicle'         , 7       , True         , True         , (  0,  0,110) ),
    Label(  'train'                , 31 ,       16 , 'vehicle'         , 7       , True         , False        , (  0, 80,100) ),
    Label(  'motorcycle'           , 32 ,       17 , 'vehicle'         , 7       , True         , False        , (  0,  0,230) ),
    Label(  'bicycle'              , 33 ,       18 , 'vehicle'         , 7       , True         , False        , (119, 11, 32) ),
    Label(  'license plate'        , -1 ,       -1 , 'vehicle'         , 7       , False        , True         , (  0,  0,142) ),
]

# print(labelsType)
labelsID = [[[]]]
for i in range(len(labelsType)):
    
    trainID = labelsType[i][2]
    if(labelsType[i][2] == 255 or labelsType[i][2] == -1):
        continue
    
    labelsID.append([[labelsType[i][1],trainID]])

labelsID.pop(0)
print(labelsID)

idx = [[[7]],[[8]],[[11]], [[12]], [[13]], [[17]], [[19]], [[20]], [[21]], [[22]], [[23]], [[24]], [[25]], [[26]], [[27]], [[28]], [[31]], [[32]], [[33]]]
